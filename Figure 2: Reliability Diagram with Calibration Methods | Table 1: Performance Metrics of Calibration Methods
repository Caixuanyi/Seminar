rm(list=ls())

library(dplyr)
library(ggplot2)
library(caret)
library(isotone)
library(gridExtra)

n=252*10 
n_train=252*6  
n_calibrate=252*2  
n_test=252*2  
n_bins_ece  <- 5   
bias_logits <- 0

gen_dt=function( 
    seed=88,n,
    coef=c(0.6, 0.8, -0.5, -0.2),
    sd=0.3){
  set.seed(seed)
  p=length(coef)
  X=matrix(rnorm(n * p), n, p)
  logit=X %*% coef+rnorm(n, sd=sd)
  y=rbinom(n, size=1, prob=plogis(logit))
  gendata=data.frame(y=y, X=X)
  return(gendata)
}

nllind=function(probs,labels){
  probs=pmin(pmax(probs,0.0000000000001), 1-0.0000000000001)
  nll=-mean(labels*log(probs) + (1-labels) * log(1 - probs))
  return(nll)
}

brierind=function(probs,labels){
  brier=mean((labels - probs)^2)
  return(brier)
}

eceind=function(probs,labels,n_bins=5){
  breaks=seq(0, 1, length.out=n_bins + 1)
  bins=cut(probs, breaks=breaks,include.lowest=TRUE)
  bin_data=data.frame(prob=probs,label=labels,bin=bins)
  bin_summary=bin_data %>% group_by(bin) %>%
    reframe(avg_prob=mean(prob),
            acc=mean(label),
            count=n())
  weight= bin_summary$count/nrow(bin_data)
  due=abs(bin_summary$avg_prob-bin_summary$acc)
  ece=sum(weight*due)
  return(ece)
}

platt_cal=function(calibrate_probs = 0.5,
                   calibrate_labels,
                   test_probs){
  dt=data.frame(calibrate_labels=calibrate_labels,
                calibrate_probs=calibrate_probs)
  model=glm(calibrate_labels ~ calibrate_probs,data=dt,
            family=binomial(link="logit"))
  calibdt=data.frame(calibrate_probs=test_probs)
  preddata= predict(model, newdata=calibdt, type="response")
  return(preddata)
}

isotonic_cal=function(calibrate_probs = 0.5, 
                      calibrate_labels, 
                      test_probs){
  ord=order(calibrate_probs)
  iso_fit=gpava(z=calibrate_probs[ord],
                y=calibrate_labels[ord],
                solver=weighted.mean)
  funct=approxfun(iso_fit$z, iso_fit$x, method="linear", rule=2)
  isodata= funct(test_probs)
  return(isodata)
}

temperature_cal=function(calibrate_logits, 
                         calibrate_labels, 
                         test_logits){
  sigmoid_Temp=function(logits,Temp){1/(1+exp(-logits/Temp))}
  objfun=function(Temp){
    cal_probs=sigmoid_Temp(calibrate_logits, Temp)
    objective=nllind(cal_probs,calibrate_labels)
    return(objective)
  }
  optim_T=optimize(objfun,interval=c(0.1, 5))
  sigmoid_Temp(test_logits, optim_T$minimum)
}

resu=function(data){
  train_data=data[1:n_train, ]
  test_data=data[(n_train + 1):(n_train + n_test), ]
  calibrate_data=data[(n_train + n_test + 1):(n_train + n_test + n_calibrate), ]
  logit_model=glm(y~., data=train_data, family=binomial)
  test_data$uncalibrated=predict(logit_model, newdata=test_data, type="response")
  NLL=nllind(test_data$uncalibrated, test_data$y)
  Brier=brierind(test_data$uncalibrated, test_data$y)
  ECE=eceind(test_data$uncalibrated, test_data$y)
  metrics_uncal=data.frame(
    Method="Uncalibrated",
    NLL=NLL,
    Brier=Brier,
    ECE=ECE
  )
  test_data$platt=platt_cal(
    predict(logit_model, calibrate_data, type="response"),
    calibrate_data$y,
    test_data$uncalibrated
  )
  test_data$isotonic=isotonic_cal(
    predict(logit_model, calibrate_data, type="response"),
    calibrate_data$y,
    test_data$uncalibrated
  )
  calibrate_logits=predict(logit_model, 
                           calibrate_data, type="link")
  test_logits=predict(logit_model, 
                      test_data, type="link")
  test_data$temperature=temperature_cal(
    calibrate_logits,
    calibrate_data$y,
    test_logits
  )
  evaluate_method=function(method_name, probs){
    NLL=nllind(probs, test_data$y)
    Brier=brierind(probs, test_data$y)
    ECE=eceind(probs, test_data$y)
    metrics=data.frame(
      Method=method_name,
      NLL=NLL,Brier=Brier,ECE=ECE
    )
    return(metrics)
  }
  metrics_cal=rbind(    evaluate_method("Platt", test_data$platt),
                        evaluate_method("Isotonic", test_data$isotonic),
                        evaluate_method("Temperature", test_data$temperature)
  )
  results=rbind(metrics_uncal, metrics_cal)
  list(results=results, test_data=test_data)
}

data1=gen_dt(n=n, 
             seed=123,
             sd=0)
data2=gen_dt(n=n, 
             seed=456, 
             sd=0.5)
result1=resu(data1)
result2=resu(data2)

result1$results 
result2$results 

data.frame(Method=result1$results$Method,
           as.matrix(data.frame(result1$results[,-1]))/matrix(c(t(result1$results[1,-1])),4,3,byrow=T) - 1)

data.frame(Method=result2$results$Method,
           as.matrix(data.frame(result2$results[,-1]))/matrix(c(t(result2$results[1,-1])),4,3,byrow=T) - 1)

plot_reliability_comparison2 <- function(test_data, n_bins = 5) {
  bins <- seq(0, 1, length.out = n_bins + 1)
  mids <- (bins[-1] + bins[-length(bins)]) / 2
  
  get_acc <- function(p) {
    b   <- cut(p, breaks=bins, include.lowest=TRUE)
    tbl <- tapply(test_data$y, b, mean)
    acc <- rep(NA_real_, n_bins)
    acc[match(names(tbl), levels(b))] <- tbl
    acc
  }
  acc_unc  <- get_acc(test_data$uncalibrated)
  acc_pl   <- get_acc(test_data$platt)
  acc_iso  <- get_acc(test_data$isotonic)
  acc_temp <- get_acc(test_data$temperature)
  
  df <- data.frame(
    bin    = rep(mids, 5),
    acc    = c(mids, acc_unc, acc_pl, acc_iso, acc_temp),
    method = factor(
      rep(c("Ideal","Uncalibrated","Platt","Isotonic","Temperature"),
          each = n_bins),
      levels = c("Ideal","Uncalibrated","Platt","Isotonic","Temperature")
    )
  )
  
  ggplot(df, aes(x=bin, y=acc, color=method)) +
    geom_line(data=subset(df, method=="Ideal"), size=1.2) +
    geom_point(data=subset(df, method!="Ideal"), size=3) +
    geom_smooth(
      data=subset(df, method!="Ideal"),
      aes(group=method),
      method="loess", se=FALSE,
      linetype="dashed"
    ) +
    scale_color_manual(values = c(
      Ideal        = "black",
      Uncalibrated = "red",
      Platt        = "blue",
      Isotonic     = "green",
      Temperature  = "purple"
    )) +
    labs(
      title = "Reliability Diagram （5 箱 + LOESS 平滑 + 理想线）",
      x     = "Predicted Probability",
      y     = "Empirical Accuracy",
      color = "Method"
    ) +
    theme_minimal(base_size = 14)
}

plot_reliability_comparison2(result1$test_data)
plot_reliability_comparison2(result2$test_data) 

test_data_fixed <- result2$test_data
test_data_fixed$uncalibrated <- 0.5

NLL_fixed <- nllind(test_data_fixed$uncalibrated, test_data_fixed$y)
Brier_fixed <- brierind(test_data_fixed$uncalibrated, test_data_fixed$y)
ECE_fixed <- eceind(test_data_fixed$uncalibrated, test_data_fixed$y)

metrics_uncal_fixed <- data.frame(
  Method="Uncalibrated_0.5",
  NLL=NLL_fixed,
  Brier=Brier_fixed,
  ECE=ECE_fixed
)

metrics_uncal_fixed

seeds <- 1:500
dt1 <- lapply(seeds,gen_dt,n=2520,sd=0.2)
dt2 <- lapply(seeds,gen_dt,n=2520,sd=0.5)

resul_boot1 <- lapply(dt1,resu)
resul_boot11 <- lapply(resul_boot1,function(x){return(x$results[,-1])})
boot_low1 = matrix(NA,4,3)
boot_high1 = matrix(NA,4,3)
boot_mean1 = matrix(NA,4,3)

for(i in 1:4){
  for(j in 1:3){
    temp <- sapply(resul_boot11,function(x){x[i,j]})
    boot_low1[i,j] <- quantile(temp,0.025)
    boot_high1[i,j] <- quantile(temp,0.975)
    boot_mean1[i,j] <- mean(temp)
  }
}

boot_low1 <- data.frame(Method = result1$results$Method,
                        boot_low1)
colnames(boot_low1)=c("Method","NLL","Brier","ECE")
boot_high1 <- data.frame(Method = result1$results$Method,
                         boot_high1)
colnames(boot_high1)=c("Method","NLL","Brier","ECE")
boot_mean1 <- data.frame(Method = result1$results$Method,
                         boot_mean1)
colnames(boot_mean1)=c("Method","NLL","Brier","ECE")

boot_low1
boot_high1
boot_mean1


resul_boot2 <- lapply(dt2,resu)
resul_boot22 <- lapply(resul_boot2,function(x){return(x$results[,-1])})
boot_low2 = matrix(NA,4,3)
boot_high2 = matrix(NA,4,3)
boot_mean2 = matrix(NA,4,3)

for(i in 1:4){
  for(j in 1:3){
    temp <- sapply(resul_boot22,function(x){x[i,j]})
    boot_low2[i,j] <- quantile(temp,0.025)
    boot_high2[i,j] <- quantile(temp,0.975)
    boot_mean2[i,j] <- mean(temp)
  }
}

boot_low2 <- data.frame(Method = result1$results$Method,
                        boot_low2)
colnames(boot_low2)=c("Method","NLL","Brier","ECE")
boot_high2 <- data.frame(Method = result1$results$Method,
                         boot_high2)
colnames(boot_high2)=c("Method","NLL","Brier","ECE")
boot_mean2 <- data.frame(Method = result1$results$Method,
                         boot_mean2)
colnames(boot_mean2)=c("Method","NLL","Brier","ECE")

boot_low2
boot_high2
boot_mean2

combine_ci_table <- function(mean_df, low_df, high_df) {
  combined <- data.frame(Method = mean_df$Method)
  for (metric in c("NLL", "Brier", "ECE")) {
    combined[[metric]] <- sprintf(
      "%.3f (%.3f–%.3f)",
      mean_df[[metric]],
      low_df[[metric]],
      high_df[[metric]]
    )
  }
  return(combined)
}

final_table2 <- combine_ci_table(boot_mean2, boot_low2, boot_high2)

print(final_table2)
